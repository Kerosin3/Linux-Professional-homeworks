# -*- mode: ruby -*-
# vi: set ft=ruby :
#
home_vb = ENV['VBOX_storage']
ENV['GIT_DISCOVERY_ACROSS_FILESYSTEM'] = '1'
host_ip = '192.168.1.66'

MACHINES = {
  :centos_8_vagrant => {
        :box_name => "centos/8",
        :ip_addr => '192.168.57.3',
	:disks => {
		:sata1 => {
			:dfile => './sata1.vdi',
			:size => 1000,
			:port => 1
		},
		:sata2 => {
                        :dfile => './sata2.vdi',
                        :size => 1000, # Megabytes
			:port => 2
                }

	}
		
  },
}

Vagrant.configure("2") do |config|
  config.vagrant.plugins = "vagrant-env"
  config.vagrant.plugins = "vagrant-vbguest"

  config.env.enable # enable the plugin
  #config.vm.box = ENV['BOX_NAME']
  #config.vm.box= ENV['GIT_DISCOVERY_ACROSS_FILESYSTEM']
  MACHINES.each do |boxname, boxconfig|

      config.vm.define boxname do |box|

      box.vm.box = boxconfig[:box_name]
      box.vm.hostname = "centos8-vagrant"
      box.vm.box_version = "2011.0"
      #box.vm.box = 'centos/8.4'
      #box.vm.box_url = 'http://cloud.centos.org/centos/8/vagrant/x86_64/images/CentOS-8-Vagrant-8.4.2105-20210603.0.x86_64.vagrant-virtualbox.box'

      #box.ssh.username = 'vagrant'
      #box.ssh.password = 'vagrant'
      box.ssh.keys_only = true
      box.ssh.insert_key = true
      #box.vm.network :private_network,:type => 'dhcp', :name => 'vboxnet0', :adapter => 2, ip: "10.0.0.55"
      box.vm.network :private_network,:ip => host_ip
      #box.vm.network "private_network", ip: boxconfig[:ip_addr]
      config.vm.network :forwarded_port, host: 4567, guest: 22, id: 'ssh'
      config.vm.network :forwarded_port, host: 4568, guest: 22 
      #box.vm.synced_folder ".", "/home/vagrant/share", disabled: false, type: 'virtualbox',:mount_options => ["dmode=777", "fmode=666"],create: true
      box.vbguest.auto_update = false
      #box.vm.synced_folder "/tmp", "/tmp/src" 
      #box.vm.provider "virtualbox" do |vb|
      #vb.memory = "2048"
      #vb.cpu = "3"
    #end

    box.vm.provider :virtualbox do |vb|
                  #vb.customize ["modifyvm", :id, "--memory", "1024"]
                  vb.memory = "2048"
                  vb.cpus = "3"
                  needsController = false

                  boxconfig[:disks].each do |dname, dconf|
                          unless File.exist?(dconf[:dfile])
                                vb.customize ['createhd', '--filename', dconf[:dfile], '--variant', 'Fixed', '--size', dconf[:size]]
                                needsController =  true
                          end

                  end
                  if needsController == true
                     vb.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]
                     boxconfig[:disks].each do |dname, dconf|
                         vb.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port', dconf[:port], '--device', 0, '--type', 'hdd', '--medium', dconf[:dfile]]
                     end
                  end
    end


#  config.vm.provision "shell" do |s|
#    ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
#    s.inline = <<-SHELL
##      echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
#      mkdir -p /root/.ssh
#      echo #{ssh_pub_key} >> /root/.ssh/authorized_keys
#      echo 'ssh keys passed to VM'
 #   SHELL
 # end
config.vm.provision "file", source: "~/.ssh/id_rsa.pub", destination: "/home/vagrant/.ssh/id_rsa.pub"
config.vm.provision :shell, :inline => "cat /home/vagrant/.ssh/id_rsa.pub >> /home/vagrant/.ssh/authorized_keys"
config.vm.provision :shell, :inline => "echo -----------------shh keys copied!-----------------------"
#config.vm.provision :shell, :inline => "cat /home/vagrant/.ssh/id_rsa.pub >> /home/vagrant/.ssh/authorized_keys", run: "always"
#config.vm.provision :shell, :inline => "sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config; sudo systemctl restart sshd;", run: "always"


  box.vm.provision "shell", inline: <<-SHELL
              yum install python36 -y
	      #mkdir -p ~root/.ssh
              #cp ~vagrant/.ssh/auth* ~root/.ssh
	  SHELL
  config.vm.provision "shell", inline: "export MY_VAR='value'"
      end
  end
end

