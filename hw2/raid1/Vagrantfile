# -*- mode: ruby -*-
# vim: set ft=ruby :
home_vb = ENV['VBOX_storage']

MACHINES = {
  :otuslinux => {
        :box_name => "centos/7",
        :ip_addr => '192.168.56.4',
	:disks => {
		:sata1 => {
			:dfile => home_vb + '/VirtualBox VMs/sata1_raid1_hw.vdi',
			:size => 1024,
			:port => 1
		},
		:sata2 => {
                        :dfile => home_vb + '/VirtualBox VMs/sata2_raid1_hw.vdi',
                        :size => 10000, # Megabytes
			:port => 2
                },
                :sata3 => {
                        :dfile => home_vb + '/VirtualBox VMs/sata3_raid1_hw.vdi',
                        :size => 10000, # Megabytes
                        :port => 3
                  }


	}

		
  },
}

Vagrant.configure("2") do |config|

  MACHINES.each do |boxname, boxconfig|

      config.vm.define boxname do |box|

          box.vm.box = boxconfig[:box_name]
          box.vm.host_name = boxname.to_s

          #box.vm.network "forwarded_port", guest: 3260, host: 3260+offset

          box.vm.network "private_network", ip: boxconfig[:ip_addr]

          box.vm.provider :virtualbox do |vb|
            	  vb.customize ["modifyvm", :id, "--memory", "1024"]
                  needsController = false
		  boxconfig[:disks].each do |dname, dconf|
			  unless File.exist?(dconf[:dfile])
				vb.customize ['createhd', '--filename', dconf[:dfile], '--variant', 'Fixed', '--size', dconf[:size]]
                                needsController =  true
                          end

		  end
                  if needsController == true
                     vb.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]
                     boxconfig[:disks].each do |dname, dconf|
                         vb.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port', dconf[:port], '--device', 0, '--type', 'hdd', '--medium', dconf[:dfile]]
                     end
                  end
          end
 	  box.vm.provision "shell", inline: <<-SHELL
	      mkdir -p ~root/.ssh
              cp ~vagrant/.ssh/auth* ~root/.ssh
	      yum install -y mdadm smartmontools hdparm gdisk
              yum install -y dosfstools lvm2 grub2 grub2-efi-x64-modules mc efibootmgr efivar
              modprobe efivars
              export device='/dev/sdb' #second drive!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
              lsblk
              echo 'creating boot pairtitions on boot drive sdb'
              sgdisk -n 0:0:+600M -t 0:ef02 -c 0:bios-boot $device
              mkfs.vfat -F32 /${device}1
              #sgdisk -e $device #backup
              echo '---------------creating raid5------------------------'
              lsblk
              echo '--------------------zeroing superblock----------------'
              mdadm --zero-superblock --force /dev/sd{c,d}
              wipefs --all --force /dev/sd{c,d}
              echo '----------------creating raid5------------------------'
              sysctl -w dev.raid.speed_limit_min=500000
              sysctl -w dev.raid.speed_limit_max=5000000
              echo 'disk syncing........................'
              yes y | mdadm --create --verbose --metadata=1.2 --force /dev/md0 -l 1 -n 2 /dev/sd{c,d}
              mdadm --wait /dev/md0
              cat /proc/mdstat
              mkdir -p /etc/mdadm
              touch /etc/mdadm/mdadm.conf
              echo "DEVICE partitions" > /etc/mdadm/mdadm.conf
              mkfs.ext4 /dev/md0
              echo '-----------------------moving system---------------------------'
              mount /dev/md0 /mnt
              mount | grep md0
              echo '................copying base folders.........'
              mkdir /mnt/boot
              echo 'mount boot folder'
              mount /dev/sdb1 /mnt/boot
              rsync -ax --delete --exclude=dev --exclude=swapfile --exclude=/home/*/gfvs --exclude=/lib/modules/*/volatile --exclude=mnt --exclude=proc --exclude=sys  / /mnt/
              echo 'copying system done'

              echo '-----------------------disk syncing....----------------------------'
              cd /mnt/
              set -m
              mkdir -p dev/ mnt/ proc/ run/ sys/ 
              #mkdir -p /mnt/sys/dev/block
              mount --rbind /sys /mnt/sys/
              for i in /lib/modules/*/volatile ; do mkdir -p /mnt/$i ; done
              mount --rbind /dev /mnt/dev
              mount --rbind /proc /mnt/proc
              echo '----------------------- chrooting-----------------------------'
              #chroot /mnt
              #uuid_raid="$(blkid -s UUID -o value /dev/md0)" #exporting uuid
              #uuid_boot="$(blkid -s UUID -o value /dev/sdb1)"
              #echo 'modifying fstab'
              #cat /dev/null > /etc/fstab
              #grep -q 'boot' /etc/fstab ||  printf '# boot\nUUID=boot_uuid    /boot    vfat    rw,relatime    0    2\n' >> /etc/fstab
              #sed -i -e "s|boot_uuid|$uuid_boot|" /etc/fstab 
              #grep -q 'main_folder' /etc/fstab ||  printf '# main_folder\nUUID=raid_uuid    /    ext4    defaults    0    2\n' >> /etc/fstab
              #sed -i -e "s|raid_uuid|$uuid_raid|" /etc/fstab 
              #grub2-install --target=x86_64-efi --efi-directory=/boot/efi  --bootloader-id=grub /dev/sdb
             # #yum -y install kernel
              #yum -y reinstall kernel 
              dracut -f
              grub2-install --target=i386-pc /dev/sdb
              grub2-mkconfig -o /boot/grub2/grub.cfg

              #------------------------------------------------------------------------#
              
              #echo '---------------creating LVM-------------------------------'
              #export device='/dev/md0'
              #for i in {1..2}; do echo "partioning ${i}'th disk......"; sgdisk -n ${i}:0:+512M $device ; done
              #for i in {1..2}; do echo "choosing type LVM for ${i}'th disk......"; sgdisk -t ${i}:8e00 $device ; done
              #for i in {1..2}; do echo "labeling ${i}'th disk......"; sgdisk -c ${i}:lvm-partition_${i} $device ; done
              #for i in {1..5}; do echo "$making ext4 on {i}'th disk"; mkfs.ext4 /dev/md0/p${i} ; done
              #echo '---------------partioning complete-----------------------'
              #echo '-------------assembling LVM from created partitions.....----------------------'
              #pvcreate /dev/md0p{1..2}
              #pvscan
              #vgcreate raid_5_test /dev/md0p{1..2}
              #vgdisplay
              #echo '--------creating LVM logical volumes---------------'
              #export name_part1='some_part1'
              #export name_part2='some_part2'
              #lvcreate -L 1G -n $name_part1 raid_5_test
              #mkfs.ext4 /dev/raid_5_test/some_part1
              #lvcreate -L 1G -n $name_part2 raid_5_test
              #mkfs.ext4 /dev/raid_5_test/some_part2
              #echo '--------adding fstab entities--------------------'
              #sed -i -e '$a\/dev/raid_5_test/some_part1     /raid/part1     ext4    defaults        0       2' /etc/fstab
              #sed -i -e '$a\/dev/raid_5_test/some_part2     /raid/part2     ext4    defaults        0       2' /etc/fstab
              #echo '-------------mounting lvm volumes on /raid-----------------------'
              #mount -a
              #mount /dev/raid_5_test/some_part1 /raid/part1
              #mount /dev/raid_5_test/some_part2 /raid/part2
              #cd /raid/part1 
              #fallocate -l 1M somefile.data
              #mdadm --detail /dev/md0 | grep UUID
              

  	  SHELL
         box.vm.provision :shell, :inline => "cat /proc/mdstat", run: "always"
         box.vm.provision :shell, :inline => "mdadm --detail /dev/md0", run: "always"
         box.vm.provision "shell",run: "always", inline: <<-SHELL
              echo '---------------xxxxxxxxxxxxxxxxxxxxxx--------------------------------'
              vgs
              pvs
              mount | grep raid
  	  SHELL

      end
  end
end
