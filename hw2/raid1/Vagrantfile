# -*- mode: ruby -*-
# vim: set ft=ruby :
home_vb = ENV['VBOX_storage']

MACHINES = {
  :otuslinux => {
        :box_name => "centos/7",
        :ip_addr => '192.168.56.4',
	:disks => {
		:sata1 => {
			:dfile => home_vb + '/VirtualBox VMs/sata1_raid1_hw.vdi',
			:size => 1024,
			:port => 1
		},
		:sata2 => {
                        :dfile => home_vb + '/VirtualBox VMs/sata2_raid1_hw.vdi',
                        :size => 10000, # Megabytes
			:port => 2
                },
                :sata3 => {
                        :dfile => home_vb + '/VirtualBox VMs/sata3_raid1_hw.vdi',
                        :size => 10000, # Megabytes
                        :port => 3
                }



	}

		
  },
}

Vagrant.configure("2") do |config|

  MACHINES.each do |boxname, boxconfig|

      config.vm.define boxname do |box|

          box.vm.box = boxconfig[:box_name]
          box.vm.host_name = boxname.to_s

          #box.vm.network "forwarded_port", guest: 3260, host: 3260+offset

          box.vm.network "private_network", ip: boxconfig[:ip_addr]

          box.vm.provider :virtualbox do |vb|
            	  vb.customize ["modifyvm", :id, "--memory", "1024"]
                  needsController = false
		  boxconfig[:disks].each do |dname, dconf|
			  unless File.exist?(dconf[:dfile])
				vb.customize ['createhd', '--filename', dconf[:dfile], '--variant', 'Fixed', '--size', dconf[:size]]
                                needsController =  true
                          end

		  end
                  if needsController == true
                     vb.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]
                     boxconfig[:disks].each do |dname, dconf|
                         vb.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port', dconf[:port], '--device', 0, '--type', 'hdd', '--medium', dconf[:dfile]]
                     end
                  end
          end
 	  box.vm.provision "shell", inline: <<-SHELL
	      mkdir -p ~root/.ssh
              cp ~vagrant/.ssh/auth* ~root/.ssh
	      yum install -y mdadm smartmontools hdparm gdisk rng-tools wget
              yum install -y dosfstools lvm2 grub2 grub2-efi-x64-modules mc efibootmgr efivar
              export device='/dev/sdb' #second drive!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
              lsblk
              #swapoff -v /swapfile
              #rm -f /swapfile
              #mkdir /var/log/journal
              #systemd-tmpfiles --create --prefix /var/log/journal
              systemctl restart systemd-journald
              echo 'creating boot pairtitions on boot drive sdb'
              sgdisk -n 0:0:+1M -t 0:ef02 -c 0:bios-boot $device
              sgdisk -n 0:0:+512M -t 0:8300 -c 0:boot $device 
              mkfs.ext4 /${device}2
              #sgdisk -e $device #backup
              echo '---------------creating raid5------------------------'
              lsblk
              echo '--------------------zeroing superblock----------------'
              mdadm --zero-superblock --force /dev/sd{c,d}
              wipefs --all --force /dev/sd{c,d}
              echo '----------------creating raid5------------------------'
              sysctl -w dev.raid.speed_limit_min=500000
              sysctl -w dev.raid.speed_limit_max=5000000
              echo 'disk syncing........................'
              yes y | mdadm --create --verbose --metadata=1.2 --force /dev/md0 -l 1 -n 2 /dev/sd{c,d}
              mdadm --wait /dev/md0
              cat /proc/mdstat
              mkdir -p /etc/mdadm
              touch /etc/mdadm/mdadm.conf
              echo "DEVICE partitions" > /etc/mdadm/mdadm.conf
              mdadm --detail --scan >> /etc/mdadm/mdadm.conf
              mkfs.ext4 /dev/md0
              echo '-----------------------moving system---------------------------'
              mount /dev/md0 /mnt
              mount | grep md0
              echo '................copying base folders.........'
              mkdir /mnt/boot
              echo 'mount boot folder'
              mount /dev/sdb2 /mnt/boot
              cp /boot/* /mnt/boot/
              rsync -ax --delete --exclude=dev  --exclude=/home/*/gfvs --exclude=/lib/modules/*/volatile --exclude=mnt --exclude=proc --exclude=sys  --exclude=boot / /mnt/
              echo 'copying system done'

              echo '-----------------------disk syncing....----------------------------'
              cd /mnt/
              set -m
              mkdir -p dev/ mnt/ proc/ run/ sys/
              #mkdir -p /mnt/sys/dev/block
              mount --rbind /sys /mnt/sys/
              for i in /lib/modules/*/volatile ; do mkdir -p /mnt/$i ; done
              mount --rbind /dev /mnt/dev
              mount --rbind /proc /mnt/proc
              echo '-----------------------executing chrooting script-----------------------------'
              cd /home/vagrant
              wget https://raw.githubusercontent.com/Kerosin3/linux_hw/main/hw2/raid1/chrooting.sh
              chmod +x chrooting.sh
              ./chrooting.sh
  	  SHELL
         box.vm.provision :shell, :inline => "cat /proc/mdstat", run: "always"
         box.vm.provision :shell, :inline => "mdadm --detail /dev/md0", run: "always"
         box.vm.provision "shell",run: "always", inline: <<-SHELL
              echo '---------------xxxxxxxxxxxxxxxxxxxxxx--------------------------------'
              vgs
              pvs
  	  SHELL

      end
  end
end
