---
- name: main_playbook
  hosts: all 
  gather_facts: true
  become: true
  vars:
    test_version: 1
    installed_soft: ['git','mc','tcpdump','net-tools','nmap','nftables','bash-completion','most','zsh','frr','frr-pythontools']
    os_env:
      - key: EDITOR
        value: vi
      - key: TERM
        value: xterm
    desired_interface_name: ""
    interfaces: 
      - default
    test_dict: {}
    temp: ""
    netmaskz: {}
    assymetric: false

  tasks:
  - name: installing soft
    ansible.builtin.package:
      name:
        - "{{ item }}"
      state: present
    loop: "{{ installed_soft  }}"
  - name: installing soft main
    ansible.builtin.package:
      name: net-tools
      state: present
##########--------------------enabling services--------------------------############
  - name: setting forwarding enable 
    ansible.posix.sysctl:
      name: net.ipv4.conf.all.forwarding
      value: '1'
      state: present
#------------------------------------------------#
  - name: disabling ufw 
    ansible.builtin.systemd:
      name: ufw
      state: stopped
      enabled: no
#------------------------------------------------#
  - name: parse interface to route
    set_fact:
         interfaces_list: "{{ ansible_interfaces | select('match', '^(enp)[0-9]+') | sort | list }}"
#------------------------------------------------#
  - name: parse interface to route 
    set_fact:
         interfaces_list: "{{ ansible_interfaces | select('match', '^(enp)[0-9]+') | sort | list }}"
    tags:
      - enable_assymetric
#------------------------------------------------#
#------------------------------------------------#
  - name: print interfaces
    debug: msg="{{ interfaces_list }}"           
#------------------------------------------------#
  - name: create dict of interface-ip addressess
    set_fact:
      test_dict: "{{ test_dict | combine( { item: hostvars[inventory_hostname]['ansible_%s' | format(item)]['ipv4']['address']  }) }}"
    with_items:
      - "{{ interfaces_list }}"
#------------------------------------------------#
  - name: create dict of interface-netmask 
    set_fact:
      netmaskz: "{{ netmaskz | combine( { item: hostvars[inventory_hostname]['ansible_%s' | format(item)]['ipv4']['netmask'] }) }}"
    with_items:
      - "{{ interfaces_list }}"

#------------------------------------------------#
  - name: print interfaces ip's
    debug: msg="{{ test_dict }}"
  - name: print interfaces ip's
    debug: msg="{{ netmaskz }}"

#acess global hostvars
  - name: ensure interfaces and ip's
    debug:
      msg: "{{ hostvars[inventory_hostname]['ansible_%s' | format(item)]['ipv4']['address'] }}"
    with_items: "{{ interfaces_list }}"
#------------------------------------------------#
#  - name: parse interface to route
#    set_fact:
#        interfaces: "{{ interfaces | combine( { item: ansible_{{item}}.ipv4.address } ) }}"
#    loop:
#      - "{{ ansible_interfaces }}"
        #  - debug:
        #var: interfaces
#  - name: parse interface to route
#    set_fact:
#      desired_interface_name="{{ item }}"
#    when: hostvars[inventory_hostname]['ansible_{{item}}']['ipv4']['address'] == "{{ ip_main }}"
#    with_items:
#      - "{{ ansible_interfaces }}"
#------------------------------------------------#
#  - name: print default interface
#    debug:
#      var: interfaces_list
#------------------------------------------------#
#  - name: insert route office1router
#    ansible.builtin.blockinfile:
#      dest: /etc/netplan/50-vagrant.yaml
#      insertafter: "{{ ip_main }}"
#      block: |6
#                  dhcp4: yes
#                  dhcp4-overrides:
#                      use-routes: false
#                  gateway4: "{{ gateway_def }}"
#
#------------------------------------------------#
  - name: append pager root
    ansible.builtin.lineinfile:
      dest: /root/.bashrc
      line: 'export PAGER="most"'
    run_once: true
#-------------------------------------------#
  - name: setting frr
    ansible.builtin.template:
      src: ./settings/frr.j2
      dest: /etc/frr/frr.conf
      mode: 0640
      owner: frr
      group: frr
      force: yes
#-------------------------------------------#
#------------------------------------------------#
  - name: create dict of interface-ip addressess
    set_fact:
      test_dict: "{{ test_dict | combine( { item: hostvars[inventory_hostname]['ansible_%s' | format(item)]['ipv4']['address']  }) }}"
    with_items:
      - "{{ interfaces_list }}"
    tags:
      - enable_assymetric
#------------------------------------------------#
  - name: create dict of interface-netmask 
    set_fact:
      netmaskz: "{{ netmaskz | combine( { item: hostvars[inventory_hostname]['ansible_%s' | format(item)]['ipv4']['netmask'] }) }}"
    with_items:
      - "{{ interfaces_list }}"
    tags:
    - enable_assymetric
  - name: set assymetric
    set_fact:
      assymetric: true
    tags:
      - enable_assymetric
  - name: setting frr assymetric routing
    ansible.builtin.template:
      src: ./settings/frr.j2
      dest: /etc/frr/frr.conf
      mode: 0640
      owner: frr
      group: frr
      force: yes
    tags:
      - enable_assymetric
#-------------------------------------------#
  - name: copy git zsh
    ansible.builtin.git:
      repo: https://github.com/blackden/zshrc.git
      dest: /root/zshrc
      clone: yes  
    run_once: true
  - name: Copy file with owner and permissions
    ansible.builtin.copy:
      src: "{{ item.0 }}"
      dest: "{{ item.1 }}"
      remote_src: yes
      owner: root
      group: root
      mode: '0744'
    with_together:
      - ['/root/zshrc/zshrc','/root/zshrc/zshrc.pre']
      - ['/root/.zshrc','/root/.zshrc.pre']
    run_once: true
  - name: copy zsh settings
    ansible.builtin.copy:
      src: "{{ item }}"
      dest: "/home/vagrant/"
      owner: root
      remote_src: yes
      group: vagrant
      mode: '0764'
    loop:
      - /root/.zshrc
      - /root/.zshrc.pre
    run_once: true
  - name: change shell for root
    ansible.builtin.shell: usermod -s /bin/zsh root
    run_once: true
  - name: change shell for user
    ansible.builtin.shell: usermod -s /usr/bin/zsh vagrant
    run_once: true
  - name: fix ssh settings
    ansible.builtin.lineinfile:
      path: "/etc/ssh/sshd_config"
      regex: "^PasswordAuthentication no"
      line: "PasswordAuthentication yes"
      insertafter: EOF
      state: present
    notify: restart_sshd
    run_once: true
#-------------------------------------------------------
  - name: customize /etc/environment
    ansible.builtin.lineinfile:
      dest: "/etc/environment"
      state: present
      regexp: "^{{ item.key }}="
      line: "{{ item.key }}={{ item.value }}"
    with_items: "{{ os_env }}"  
#----------------------------------------------------------------
  - name: Configure ospf
    ansible.builtin.lineinfile:
      path: "/etc/frr/daemons"
      regex: "^{{item.key}}"
      line: "{{item.key}}={{item.value}}"
      state: present
    loop:
      - { key: "ospfd", value: "yes" }
  - name: enable zebra
    ansible.builtin.lineinfile:
      path: "/etc/frr/daemons"
      insertafter: 'ospfd=yes'
      line: "zebra=yes"
#----------------------------------------------------------------
  - name: restart network
    ansible.builtin.shell: systemctl restart systemd-networkd
  - name: restart sshd
    ansible.builtin.shell: systemctl restart sshd
  - name: restart frr
    ansible.builtin.shell: systemctl restart frr


  handlers:
    - name: restart_crond
      service:
        name=crond
        state=restarted
    - name: restart_send_mail
      service:
        name=sendmail
        state=restarted
    - name: restart_sshd
      service:
        name=sshd
        state=restarted
    - name: restart_network
      service:
        name=network
        state=restarted

